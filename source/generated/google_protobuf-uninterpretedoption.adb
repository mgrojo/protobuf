--  begin read only
--  Generated by the protocol buffer compiler. DO NOT EDIT!
--  source: google/protobuf/descriptor.proto
--
--  ----------------------------------------------------------------------
pragma Warnings (Off);
pragma Ada_2012;
with Google.Protobuf.Message;
with Google.Protobuf.Wire_Format;
with Google.Protobuf.IO.Coded_Output_Stream;
with Google.Protobuf.IO.Coded_Input_Stream;
with Google.Protobuf.Generated_Message_Utilities;
with Ada.Streams.Stream_IO;
with Ada.Containers.Vectors;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
with Interfaces;

with Google_Protobuf.UninterpretedOption.NamePart;

package body Google_Protobuf.UninterpretedOption is
  ---------------------------------------------------------------------------
  --    Inherited functions and procedures from Google.Protobuf.Message    --
  ---------------------------------------------------------------------------

  procedure Clear (The_Message : in out Google_Protobuf.UninterpretedOption.Instance) is
  begin
    if (The_Message.Has_Bits (1 / 32) and Google.Protobuf.Wire_Format.Shift_Left (16#FF#, 1 mod 32)) /= 0 then
      if The_Message.Has_Identifier_Value then
        The_Message.Clear_Has_Identifier_Value;
        declare
           procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
        begin
           if The_Message.Identifier_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
              Free (The_Message.Identifier_Value);
           end if;
        end;
        The_Message.Identifier_Value := Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access;
      end if;
      The_Message.Positive_Int_Value := 0;
      The_Message.Negative_Int_Value := 0;
      The_Message.Double_Value := Google.Protobuf.Wire_Format.PB_Double (0.00000000000000);
      if The_Message.Has_String_Value then
        The_Message.Clear_Has_String_Value;
        declare
           procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
        begin
           if The_Message.String_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
              Free (The_Message.String_Value);
           end if;
        end;
        The_Message.String_Value := Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access;
      end if;
      if The_Message.Has_Aggregate_Value then
        The_Message.Clear_Has_Aggregate_Value;
        declare
           procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
        begin
           if The_Message.Aggregate_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
              Free (The_Message.Aggregate_Value);
           end if;
        end;
        The_Message.Aggregate_Value := Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access;
      end if;
    end if;
    for C in The_Message.Name.Iterate loop
       Google.Protobuf.Message.Free (The_Message.Name.Reference (C).Element.all);
    end loop;
    The_Message.Name.Clear;

    The_Message.Has_Bits := (others => 0);
  end Clear;

  procedure Copy (To   : in out Google_Protobuf.UninterpretedOption.Instance;
                  From : in Google_Protobuf.UninterpretedOption.Instance) is
  begin
     To.Clear;
     To.Merge (From);
  end Copy;

  function Get_Type_Name (The_Message : in Google_Protobuf.UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_String is
  begin
     return "google.protobuf.UninterpretedOption";
  end Get_Type_Name;

  function Is_Initialized (The_Message : in Google_Protobuf.UninterpretedOption.Instance) return Boolean is
  begin
    for E of The_Message.Name loop
       if not E.Is_Initialized then
          return False;
       end if;
    end loop;
    return True;
  end Is_Initialized;

  procedure Merge (To : in out Google_Protobuf.UninterpretedOption.Instance; From : in Google_Protobuf.UninterpretedOption.Instance) is
  begin
    declare
       Temp : Google_Protobuf.UninterpretedOption.NamePart.NamePart_Access;
    begin
       for E of From.Name loop
          Temp := new Google_Protobuf.UninterpretedOption.NamePart.Instance;
          Temp.Merge (Google_Protobuf.UninterpretedOption.NamePart.Instance (E.all));
          To.Name.Append (Google.Protobuf.Message.Instance_Access (Temp));
       end loop;
    end;
    if (From.Has_Bits (1 / 32) and Google.Protobuf.Wire_Format.Shift_Left (16#FF#, 1 mod 32)) /= 0 then
      -- optional string identifier_value = 3;
      if From.Has_Identifier_Value then
        To.Set_Identifier_Value(From.Get_Identifier_Value);
      end if;
      -- optional uint64 positive_int_value = 4;
      if From.Has_Positive_Int_Value then
        To.Set_Positive_Int_Value (From.Positive_Int_Value);
      end if;
      -- optional int64 negative_int_value = 5;
      if From.Has_Negative_Int_Value then
        To.Set_Negative_Int_Value (From.Negative_Int_Value);
      end if;
      -- optional double double_value = 6;
      if From.Has_Double_Value then
        To.Set_Double_Value (From.Double_Value);
      end if;
      -- optional bytes string_value = 7;
      if From.Has_String_Value then
        To.Set_String_Value(From.Get_String_Value);
      end if;
      -- optional string aggregate_value = 8;
      if From.Has_Aggregate_Value then
        To.Set_Aggregate_Value(From.Get_Aggregate_Value);
      end if;
    end if;
  end Merge;

  function Byte_Size (The_Message : in out Google_Protobuf.UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_Object_Size is
     Total_Size : Google.Protobuf.Wire_Format.PB_Object_Size := 0;
  begin
    if (The_Message.Has_Bits (1 / 32) and Google.Protobuf.Wire_Format.Shift_Left (16#FF#, 1 mod 32)) /= 0 then
      -- optional string identifier_value = 3;
      if The_Message.Has_Identifier_Value then
        Total_Size := Total_Size + 1 + Google.Protobuf.IO.Coded_Output_Stream.Compute_String_Size_No_Tag (The_Message.Identifier_Value.all);
      end if;
      -- optional uint64 positive_int_value = 4;
      if The_Message.Has_Positive_Int_Value then
        Total_Size := Total_Size + 1 + Google.Protobuf.IO.Coded_Output_Stream.Compute_Unsigned_Integer_64_Size_No_Tag (The_Message.Positive_Int_Value);
      end if;
      -- optional int64 negative_int_value = 5;
      if The_Message.Has_Negative_Int_Value then
        Total_Size := Total_Size + 1 + Google.Protobuf.IO.Coded_Output_Stream.Compute_Integer_64_Size_No_Tag (The_Message.Negative_Int_Value);
      end if;
      -- optional double double_value = 6;
      if The_Message.Has_Double_Value then
        Total_Size := Total_Size + 1 + 8;
      end if;
      -- optional bytes string_value = 7;
      if The_Message.Has_String_Value then
        Total_Size := Total_Size + 1 + Google.Protobuf.IO.Coded_Output_Stream.Compute_String_Size_No_Tag (The_Message.String_Value.all);
      end if;
      -- optional string aggregate_value = 8;
      if The_Message.Has_Aggregate_Value then
        Total_Size := Total_Size + 1 + Google.Protobuf.IO.Coded_Output_Stream.Compute_String_Size_No_Tag (The_Message.Aggregate_Value.all);
      end if;
    end if;
    -- repeated .google.protobuf.UninterpretedOption.NamePart name = 2;
    Total_Size := Total_Size + 1 * The_Message.Name_Size;
       for E of The_Message.Name loop
       Total_Size := Total_Size + Google.Protobuf.IO.Coded_Output_Stream.Compute_Message_Size_No_Tag (E.all);
    end loop;

    The_Message.Cached_Size := Total_Size;
    return Total_Size;
  end Byte_Size;

  procedure Serialize_With_Cached_Sizes
     (The_Message   : in Google_Protobuf.UninterpretedOption.Instance;
      The_Coded_Output_Stream : in Google.Protobuf.IO.Coded_Output_Stream.Instance) is
  begin
    -- repeated .google.protobuf.UninterpretedOption.NamePart name = 2;
    for E of The_Message.Name loop
       The_Coded_Output_Stream.Write_Message (2, E.all);
    end loop;
    -- optional string identifier_value = 3;
    if The_Message.Has_Identifier_Value then
      The_Coded_Output_Stream.Write_String (3, The_Message.Identifier_Value.all);
    end if;
    -- optional uint64 positive_int_value = 4;
    if The_Message.Has_Positive_Int_Value then
      Google.Protobuf.IO.Coded_Output_Stream.Write_Unsigned_Integer_64 (The_Coded_Output_Stream, 4, The_Message.Positive_Int_Value);
    end if;
    -- optional int64 negative_int_value = 5;
    if The_Message.Has_Negative_Int_Value then
      Google.Protobuf.IO.Coded_Output_Stream.Write_Integer_64 (The_Coded_Output_Stream, 5, The_Message.Negative_Int_Value);
    end if;
    -- optional double double_value = 6;
    if The_Message.Has_Double_Value then
      Google.Protobuf.IO.Coded_Output_Stream.Write_Double (The_Coded_Output_Stream, 6, The_Message.Double_Value);
    end if;
    -- optional bytes string_value = 7;
    if The_Message.Has_String_Value then
      The_Coded_Output_Stream.Write_String (7, The_Message.String_Value.all);
    end if;
    -- optional string aggregate_value = 8;
    if The_Message.Has_Aggregate_Value then
      The_Coded_Output_Stream.Write_String (8, The_Message.Aggregate_Value.all);
    end if;
  end Serialize_With_Cached_Sizes;

  procedure Merge_Partial_From_Coded_Input_Stream
     (The_Message   : in out Google_Protobuf.UninterpretedOption.Instance;
      The_Coded_Input_Stream : in out Google.Protobuf.IO.Coded_Input_Stream.Instance) is

     Tag : Google.Protobuf.Wire_Format.PB_UInt32;
  begin
    Tag := The_Coded_Input_Stream.Read_Tag;
    while Tag /= 0 loop
      case Google.Protobuf.Wire_Format.Get_Tag_Field_Number (Tag) is
      -- repeated .google.protobuf.UninterpretedOption.NamePart name = 2;
      when 2 =>
        if Google.Protobuf.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Google.Protobuf.Wire_Format.LENGTH_DELIMITED then
          declare
             Temp : Google_Protobuf.UninterpretedOption.NamePart.NamePart_Access := The_Message.Add_Name;
          begin
             The_Coded_Input_Stream.Read_Message (Temp.all);
          end;
        end if;
      -- optional string identifier_value = 3;
      when 3 =>
        if Google.Protobuf.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Google.Protobuf.Wire_Format.LENGTH_DELIMITED then
          declare
             procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
          begin
             if The_Message.Identifier_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
                Free (The_Message.Identifier_Value);
             end if;
          end;
          The_Message.Set_Has_Identifier_Value;
          The_Message.Identifier_Value := The_Coded_Input_Stream.Read_String;
        end if;
      -- optional uint64 positive_int_value = 4;
      when 4 =>
        if Google.Protobuf.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Google.Protobuf.Wire_Format.VARINT then
          The_Message.Positive_Int_Value := The_Coded_Input_Stream.Read_Unsigned_Integer_64;
          The_Message.Set_Has_Positive_Int_Value;
        end if;
      -- optional int64 negative_int_value = 5;
      when 5 =>
        if Google.Protobuf.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Google.Protobuf.Wire_Format.VARINT then
          The_Message.Negative_Int_Value := The_Coded_Input_Stream.Read_Integer_64;
          The_Message.Set_Has_Negative_Int_Value;
        end if;
      -- optional double double_value = 6;
      when 6 =>
        if Google.Protobuf.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Google.Protobuf.Wire_Format.FIXED_64 then
          The_Message.Double_Value := The_Coded_Input_Stream.Read_Double;
          The_Message.Set_Has_Double_Value;
        end if;
      -- optional bytes string_value = 7;
      when 7 =>
        if Google.Protobuf.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Google.Protobuf.Wire_Format.LENGTH_DELIMITED then
          declare
             procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
          begin
             if The_Message.String_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
                Free (The_Message.String_Value);
             end if;
          end;
          The_Message.Set_Has_String_Value;
          The_Message.String_Value := The_Coded_Input_Stream.Read_String;
        end if;
      -- optional string aggregate_value = 8;
      when 8 =>
        if Google.Protobuf.Wire_Format.Get_Tag_Wire_Type (Tag) =
          Google.Protobuf.Wire_Format.LENGTH_DELIMITED then
          declare
             procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
          begin
             if The_Message.Aggregate_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
                Free (The_Message.Aggregate_Value);
             end if;
          end;
          The_Message.Set_Has_Aggregate_Value;
          The_Message.Aggregate_Value := The_Coded_Input_Stream.Read_String;
        end if;
      when others =>
        declare
           Dummy : Google.Protobuf.Wire_Format.PB_Bool with Unreferenced;
        begin
           Dummy := The_Coded_Input_Stream.Skip_Field (Tag);
           return;
        end;
      end case;
      Tag := The_Coded_Input_Stream.Read_Tag;
    end loop;
  end Merge_Partial_From_Coded_Input_Stream;

  function Get_Cached_Size
     (The_Message : in Google_Protobuf.UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_Object_Size is
  begin
     return The_Message.Cached_Size;
  end Get_Cached_Size;

  overriding
  procedure Finalize (The_Message : in out Google_Protobuf.UninterpretedOption.Instance) is
  begin
    for C in The_Message.Name.Iterate loop
       Google.Protobuf.Message.Free (The_Message.Name.Reference (C).Element.all);
    end loop;
    The_Message.Name.Clear;

    declare
       procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
    begin
       if The_Message.Identifier_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.Identifier_Value);
       end if;
    end;
    declare
       procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
    begin
       if The_Message.String_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.String_Value);
       end if;
    end;
    declare
       procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
    begin
       if The_Message.Aggregate_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.Aggregate_Value);
       end if;
    end;
  end Finalize;

  ---------------------------------------------------------------------------
  --                  Field accessor definitions                           --
  ---------------------------------------------------------------------------

  -- repeated .google.protobuf.UninterpretedOption.NamePart name = 2;
  function Name_Size
     (The_Message : in UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_Object_Size is
  begin
     return Google.Protobuf.Wire_Format.PB_Object_Size (The_Message.Name.Length);
  end Name_Size;

  procedure Clear_Name
     (The_Message : in out UninterpretedOption.Instance) is
  begin
    for C in The_Message.Name.Iterate loop
       Google.Protobuf.Message.Free (The_Message.Name.Reference (C).Element.all);
    end loop;
    The_Message.Name.Clear;

  end Clear_Name;

  function Get_Name
     (The_Message : in UninterpretedOption.Instance;
     Index        : in Google.Protobuf.Wire_Format.PB_Object_Size) return access Google_Protobuf.UninterpretedOption.NamePart.Instance is
  begin
     return Google_Protobuf.UninterpretedOption.NamePart.NamePart_Access (The_Message.Name.Element (Index));
  end Get_Name;

  function Add_Name
     (The_Message : in out UninterpretedOption.Instance) return access Google_Protobuf.UninterpretedOption.NamePart.Instance is
     Temp : Google_Protobuf.UninterpretedOption.NamePart.NamePart_Access := new Google_Protobuf.UninterpretedOption.NamePart.Instance;
  begin
     The_Message.Name.Append (Google.Protobuf.Message.Instance_Access (Temp));
     return Temp;
  end Add_Name;

  -- optional string identifier_value = 3;
  function Has_Identifier_Value
     (The_Message : in UninterpretedOption.Instance) return Boolean is
  begin
     return (The_Message.Has_Bits(0) and 16#00000002#) /= 0;
  end Has_Identifier_Value;

  procedure Set_Has_Identifier_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000002#;
  end Set_Has_Identifier_Value;

  procedure Clear_Has_Identifier_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000002#);
  end Clear_Has_Identifier_Value;

  procedure Clear_Identifier_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
    The_Message.Clear_Has_Identifier_Value;
    declare
       procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
    begin
       if The_Message.Identifier_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.Identifier_Value);
       end if;
    end;
    The_Message.Identifier_Value := Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access;
    The_Message.Clear_Has_Identifier_Value;
  end Clear_Identifier_Value;

  function Get_Identifier_Value
     (The_Message : in UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_String is
  begin
     return The_Message.Identifier_Value.all;
  end Get_Identifier_Value;

  function Get_Identifier_Value
     (The_Message : in out UninterpretedOption.Instance;
     Size        : in Integer := -1) return Google.Protobuf.Wire_Format.PB_String_Access is
  begin
     The_Message.Set_Has_Identifier_Value;
     if Size >= 0 then
  declare
     procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
  begin
     if The_Message.Identifier_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.Identifier_Value);
     end if;
  end;
         The_Message.Identifier_Value := new Google.Protobuf.Wire_Format.PB_String'(1 .. Size => Character'Val (0));
         return The_Message.Identifier_Value;
     end if;

     if The_Message.Identifier_Value = Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        The_Message.Identifier_Value := new String'(Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING);
      end if;
      return The_Message.Identifier_Value;
  end Get_Identifier_Value;

  procedure Set_Identifier_Value
     (The_Message : in out UninterpretedOption.Instance;
      Value       : in Google.Protobuf.Wire_Format.PB_String) is
  begin
     The_Message.Set_Has_Identifier_Value;
     if The_Message.Identifier_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access and then Value'Length = The_Message.Identifier_Value.all'Length then
        The_Message.Identifier_Value.all := Value;
     else
  declare
     procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
  begin
     if The_Message.Identifier_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.Identifier_Value);
     end if;
  end;
        The_Message.Identifier_Value := new Google.Protobuf.Wire_Format.PB_String'(Value);
     end if;
  end Set_Identifier_Value;

  function Release_Identifier_Value
     (The_Message : in out UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_String_Access is
  begin
     The_Message.Clear_Has_Identifier_Value;
     if The_Message.Identifier_Value = Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        return null;
     else
        declare
           Temp : Google.Protobuf.Wire_Format.PB_String_Access := The_Message.Identifier_Value;
        begin
           The_Message.Identifier_Value := Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access;
           return Temp;
        end;
     end if;
  end Release_Identifier_Value;

  -- optional uint64 positive_int_value = 4;
  function Has_Positive_Int_Value
     (The_Message : in UninterpretedOption.Instance) return Boolean is
  begin
     return (The_Message.Has_Bits(0) and 16#00000004#) /= 0;
  end Has_Positive_Int_Value;

  procedure Set_Has_Positive_Int_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000004#;
  end Set_Has_Positive_Int_Value;

  procedure Clear_Has_Positive_Int_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000004#);
  end Clear_Has_Positive_Int_Value;

  procedure Clear_Positive_Int_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
    The_Message.Positive_Int_Value := 0;
    The_Message.Clear_Has_Positive_Int_Value;
  end Clear_Positive_Int_Value;

  function Get_Positive_Int_Value (The_Message : in UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_UInt64 is
  begin
     return The_Message.Positive_Int_Value;
  end Get_Positive_Int_Value;

  procedure Set_Positive_Int_Value (The_Message : in out UninterpretedOption.Instance; Value : in Google.Protobuf.Wire_Format.PB_UInt64) is
  begin
     The_Message.Set_Has_Positive_Int_Value;
     The_Message.Positive_Int_Value := Value;
  end Set_Positive_Int_Value;

  -- optional int64 negative_int_value = 5;
  function Has_Negative_Int_Value
     (The_Message : in UninterpretedOption.Instance) return Boolean is
  begin
     return (The_Message.Has_Bits(0) and 16#00000008#) /= 0;
  end Has_Negative_Int_Value;

  procedure Set_Has_Negative_Int_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000008#;
  end Set_Has_Negative_Int_Value;

  procedure Clear_Has_Negative_Int_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000008#);
  end Clear_Has_Negative_Int_Value;

  procedure Clear_Negative_Int_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
    The_Message.Negative_Int_Value := 0;
    The_Message.Clear_Has_Negative_Int_Value;
  end Clear_Negative_Int_Value;

  function Get_Negative_Int_Value (The_Message : in UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_Int64 is
  begin
     return The_Message.Negative_Int_Value;
  end Get_Negative_Int_Value;

  procedure Set_Negative_Int_Value (The_Message : in out UninterpretedOption.Instance; Value : in Google.Protobuf.Wire_Format.PB_Int64) is
  begin
     The_Message.Set_Has_Negative_Int_Value;
     The_Message.Negative_Int_Value := Value;
  end Set_Negative_Int_Value;

  -- optional double double_value = 6;
  function Has_Double_Value
     (The_Message : in UninterpretedOption.Instance) return Boolean is
  begin
     return (The_Message.Has_Bits(0) and 16#00000010#) /= 0;
  end Has_Double_Value;

  procedure Set_Has_Double_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000010#;
  end Set_Has_Double_Value;

  procedure Clear_Has_Double_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000010#);
  end Clear_Has_Double_Value;

  procedure Clear_Double_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
    The_Message.Double_Value := Google.Protobuf.Wire_Format.PB_Double (0.00000000000000);
    The_Message.Clear_Has_Double_Value;
  end Clear_Double_Value;

  function Get_Double_Value (The_Message : in UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_Double is
  begin
     return The_Message.Double_Value;
  end Get_Double_Value;

  procedure Set_Double_Value (The_Message : in out UninterpretedOption.Instance; Value : in Google.Protobuf.Wire_Format.PB_Double) is
  begin
     The_Message.Set_Has_Double_Value;
     The_Message.Double_Value := Value;
  end Set_Double_Value;

  -- optional bytes string_value = 7;
  function Has_String_Value
     (The_Message : in UninterpretedOption.Instance) return Boolean is
  begin
     return (The_Message.Has_Bits(0) and 16#00000020#) /= 0;
  end Has_String_Value;

  procedure Set_Has_String_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000020#;
  end Set_Has_String_Value;

  procedure Clear_Has_String_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000020#);
  end Clear_Has_String_Value;

  procedure Clear_String_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
    The_Message.Clear_Has_String_Value;
    declare
       procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
    begin
       if The_Message.String_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.String_Value);
       end if;
    end;
    The_Message.String_Value := Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access;
    The_Message.Clear_Has_String_Value;
  end Clear_String_Value;

  function Get_String_Value
     (The_Message : in UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_String is
  begin
     return The_Message.String_Value.all;
  end Get_String_Value;

  function Get_String_Value
     (The_Message : in out UninterpretedOption.Instance;
     Size        : in Integer := -1) return Google.Protobuf.Wire_Format.PB_String_Access is
  begin
     The_Message.Set_Has_String_Value;
     if Size >= 0 then
  declare
     procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
  begin
     if The_Message.String_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.String_Value);
     end if;
  end;
         The_Message.String_Value := new Google.Protobuf.Wire_Format.PB_String'(1 .. Size => Character'Val (0));
         return The_Message.String_Value;
     end if;

     if The_Message.String_Value = Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        The_Message.String_Value := new String'(Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING);
      end if;
      return The_Message.String_Value;
  end Get_String_Value;

  procedure Set_String_Value
     (The_Message : in out UninterpretedOption.Instance;
      Value       : in Google.Protobuf.Wire_Format.PB_String) is
  begin
     The_Message.Set_Has_String_Value;
     if The_Message.String_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access and then Value'Length = The_Message.String_Value.all'Length then
        The_Message.String_Value.all := Value;
     else
  declare
     procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
  begin
     if The_Message.String_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.String_Value);
     end if;
  end;
        The_Message.String_Value := new Google.Protobuf.Wire_Format.PB_String'(Value);
     end if;
  end Set_String_Value;

  function Release_String_Value
     (The_Message : in out UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_String_Access is
  begin
     The_Message.Clear_Has_String_Value;
     if The_Message.String_Value = Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        return null;
     else
        declare
           Temp : Google.Protobuf.Wire_Format.PB_String_Access := The_Message.String_Value;
        begin
           The_Message.String_Value := Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access;
           return Temp;
        end;
     end if;
  end Release_String_Value;

  -- optional string aggregate_value = 8;
  function Has_Aggregate_Value
     (The_Message : in UninterpretedOption.Instance) return Boolean is
  begin
     return (The_Message.Has_Bits(0) and 16#00000040#) /= 0;
  end Has_Aggregate_Value;

  procedure Set_Has_Aggregate_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) or 16#00000040#;
  end Set_Has_Aggregate_Value;

  procedure Clear_Has_Aggregate_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
     The_Message.Has_Bits(0) := The_Message.Has_Bits(0) and (not 16#00000040#);
  end Clear_Has_Aggregate_Value;

  procedure Clear_Aggregate_Value
     (The_Message : in out UninterpretedOption.Instance) is
  begin
    The_Message.Clear_Has_Aggregate_Value;
    declare
       procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
    begin
       if The_Message.Aggregate_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
          Free (The_Message.Aggregate_Value);
       end if;
    end;
    The_Message.Aggregate_Value := Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access;
    The_Message.Clear_Has_Aggregate_Value;
  end Clear_Aggregate_Value;

  function Get_Aggregate_Value
     (The_Message : in UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_String is
  begin
     return The_Message.Aggregate_Value.all;
  end Get_Aggregate_Value;

  function Get_Aggregate_Value
     (The_Message : in out UninterpretedOption.Instance;
     Size        : in Integer := -1) return Google.Protobuf.Wire_Format.PB_String_Access is
  begin
     The_Message.Set_Has_Aggregate_Value;
     if Size >= 0 then
  declare
     procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
  begin
     if The_Message.Aggregate_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.Aggregate_Value);
     end if;
  end;
         The_Message.Aggregate_Value := new Google.Protobuf.Wire_Format.PB_String'(1 .. Size => Character'Val (0));
         return The_Message.Aggregate_Value;
     end if;

     if The_Message.Aggregate_Value = Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        The_Message.Aggregate_Value := new String'(Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING);
      end if;
      return The_Message.Aggregate_Value;
  end Get_Aggregate_Value;

  procedure Set_Aggregate_Value
     (The_Message : in out UninterpretedOption.Instance;
      Value       : in Google.Protobuf.Wire_Format.PB_String) is
  begin
     The_Message.Set_Has_Aggregate_Value;
     if The_Message.Aggregate_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access and then Value'Length = The_Message.Aggregate_Value.all'Length then
        The_Message.Aggregate_Value.all := Value;
     else
  declare
     procedure Free is new Ada.Unchecked_Deallocation (Google.Protobuf.Wire_Format.PB_String, Google.Protobuf.Wire_Format.PB_String_Access);
  begin
     if The_Message.Aggregate_Value /= Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        Free (The_Message.Aggregate_Value);
     end if;
  end;
        The_Message.Aggregate_Value := new Google.Protobuf.Wire_Format.PB_String'(Value);
     end if;
  end Set_Aggregate_Value;

  function Release_Aggregate_Value
     (The_Message : in out UninterpretedOption.Instance) return Google.Protobuf.Wire_Format.PB_String_Access is
  begin
     The_Message.Clear_Has_Aggregate_Value;
     if The_Message.Aggregate_Value = Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access then
        return null;
     else
        declare
           Temp : Google.Protobuf.Wire_Format.PB_String_Access := The_Message.Aggregate_Value;
        begin
           The_Message.Aggregate_Value := Google.Protobuf.Generated_Message_Utilities.EMPTY_STRING'Access;
           return Temp;
        end;
     end if;
  end Release_Aggregate_Value;

end Google_Protobuf.UninterpretedOption;
--  end read only
